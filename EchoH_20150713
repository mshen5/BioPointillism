%{
Michael Shen - 2015
EchoH prints .csv file breakdown of image for echo transfer
Comparisons are done in the HSV colorspace
%}

imName = input('Enter image file name.\n','s'); 
startWell = input('Enter the well position for first color (ie A1):\n','s');
startRow = double(startWell(1))-64;
if(length(startWell)==2)
    startCol = str2num(startWell(2));
elseif(length(startWell)==3)
    startCol = str2num(startWell(2:3));
end
dropSize = input('Enter the Echo droplet size in nanoliters:\n');
RGB = imread(imName);
numRows = size(RGB,1);
numCols = size(RGB,2);
if numRows>128 || numCols>192
    if (numCols/numRows) > (192/128)
        RGB = imresize(RGB, [NaN 192]);
    else
        RGB = imresize(RGB, [128 NaN]);
    end
end

HSV = rgb2hsv(RGB);


[data,test] = ImgHSV(HSV);
wells = size(data,1)*size(data,2);
output = zeros(wells,5);
i = 1;
%{
STEP 4
TO DEFINE POSITION OF COLORS
TO DEFINE FIRST COLOR COLUMN ON 384PP PLATE
NOTE: All colors must be placed sequentially, without skipping wells, on the same row of the 384PP source plate
Change const = col number-1 
(ie for first color in B1, change const = 0
for first color in A3, change const = 2)

TO DEFINE COLOR ROW ON 384PP PLATE
Change output(i,1) = row number
(ie for colors in row B, output(i,1) = 2
for colors in row D, output(i,1) = 4;

TO CHANGE TRANSFER SIZE IN ECHO
change output(i,5) = 2.5 to a multiple of 2.5
This is the value of the drop size in the echo
%}
const = startCol-1;
for r = 1:size(data,1)
    for c = 1:size(data,2)
        output(i,1) = startRow;
        output(i,2) = data(r,c)+const;
        output(i,3) = r;
        output(i,4) = c;
        output(i,5) = dropSize;
        i = i+1;
    end

end

c = mat2cell(output,wells,5);

%STEP 5
%Uncomment if you want to not print whitespace. 
%Change line output(i,2)~= 2+const
%Change the 2+const in that line to const+whatever col white is in
%(ie for white in col 4, change to output(i,2) ~= 4+const
%Not printing whitespace substantially reduces print time. 



%{
parsedOut = [];
for i = 1:size(output,1)
    if output(i,2) ~= 2+const
        parsedOut = [parsedOut;output(i,:)];
    end
end
output = parsedOut;
%}


header = ['Source Row,' 'Source Column,' 'Destination Row,' 'Destination Column,' 'Transfer Volume'];
csvwrite('echoProgram',output);
